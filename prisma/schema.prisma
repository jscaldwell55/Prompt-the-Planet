generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  picture       String?
  provider      String
  providerId    String
  karma         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  prompts       Prompt[]
  comments      Comment[]
  upvotes       Upvote[]
  downvotes     Downvote[]
  following     Follow[]  @relation("Following")
  followers     Follow[]  @relation("Followers")
  notifications Notification[]
  pullRequests  PullRequest[]
}

model Prompt {
  id          String    @id @default(cuid())
  title       String
  description String
  code        String
  language    String
  version     Int       @default(1)
  views       Int       @default(0)
  karma       Int       @default(0)
  complexity  Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
  upvotes     Upvote[]
  downvotes   Downvote[]
  variations  Prompt[]  @relation("VariationOf")
  variationOf Prompt?   @relation("VariationOf", fields: [variationOfId], references: [id])
  variationOfId String?
  suggestions Suggestion[]
  evolution   Evolution[]
  tags        Tag[]
  pullRequests PullRequest[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  prompt    Prompt   @relation(fields: [promptId], references: [id])
  promptId  String
  parent    Comment? @relation("Parent", fields: [parentId], references: [id])
  parentId  String?
  replies   Comment[] @relation("Parent")
  upvotes   Upvote[]
  downvotes Downvote[]
}

model Upvote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  prompt    Prompt?  @relation(fields: [promptId], references: [id])
  promptId  String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
}

model Downvote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  prompt    Prompt?  @relation(fields: [promptId], references: [id])
  promptId  String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  follower  User     @relation("Following", fields: [followerId], references: [id])
  followerId String
  following User     @relation("Followers", fields: [followingId], references: [id])
  followingId String
}

model Suggestion {
  id          String   @id @default(cuid())
  title       String
  description String
  code        String
  status      String   @default("OPEN")
  changes     Json     // Stores diff information
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  prompt      Prompt   @relation(fields: [promptId], references: [id])
  promptId    String
  comments    Comment[]
  upvotes     Upvote[]
  downvotes   Downvote[]
  evolution   Evolution
}

model Evolution {
  id          String   @id @default(cuid())
  prompt      Prompt   @relation(fields: [promptId], references: [id])
  promptId    String
  suggestion  Suggestion? @relation(fields: [suggestionId], references: [id])
  suggestionId String?
  changes     Json     // Stores diff information
  description String
  createdAt   DateTime @default(now())
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
}

model Notification {
  id          String   @id @default(cuid())
  type        String
  content     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  prompt      Prompt?  @relation(fields: [promptId], references: [id])
  promptId    String?
  comment     Comment? @relation(fields: [commentId], references: [id])
  commentId   String?
  pullRequest PullRequest? @relation(fields: [pullRequestId], references: [id])
  pullRequestId String?
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  prompts   Prompt[]
}

model PullRequest {
  id          String   @id @default(cuid())
  title       String
  description String
  status      String   @default("OPEN") // OPEN, MERGED, CLOSED
  changes     Json     // Stores diff information
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  prompt      Prompt   @relation(fields: [promptId], references: [id])
  promptId    String
  comments    Comment[]
  upvotes     Upvote[]
  downvotes   Downvote[]
  notifications Notification[]
}
